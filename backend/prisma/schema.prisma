// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Modelo de Usuario (Ejemplo)
model User {
  idUser      Int      @id @default(autoincrement())  // ID Ãºnico
  idUserType  Int      @map("idUserType")  // ID del tipo de usuario
  email       String   
  username    String   
  password    String
  status      Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime? @updatedAt

  // Relaciones
  userType    UserType @relation(fields: [idUserType], references: [idUserType])
  userInformation UserInformation?
  products    Product[]
  carts       Cart[]
  personalizations Personalization[]
  productPersonalizations ProductPersonalization[]

  // Nombre de la tabla
  @@map("user")
}

model UserType {
  idUserType  Int @id @default(autoincrement())
  type        String

  // Relaciones
  users       User[]

  // Nombre de la tabla
  @@map("userType")
}

model UserInformation{
  idUserInformation  Int @id @default(autoincrement())
  idUser             Int @unique
  name               String
  lastName           String
  secondLastName     String?
  phone              String @db.VarChar(10)
  user               User @relation(fields: [idUser], references: [idUser])
  updatedAt          DateTime? @updatedAt

  // Relaciones
  locations          Location[]

  // Nombre de la tabla
  @@map("userInformation")
}

model Location{
  idLocation Int @id @default(autoincrement())
  idUserInformation Int
  street     String @db.VarChar(100)
  houseNumber String @db.VarChar(10)
  postalCode String @db.VarChar(5)
  neighborhood String @db.VarChar(50)
  status    Boolean

  // Relaciones
  userInformation UserInformation @relation(fields: [idUserInformation], references: [idUserInformation])
  orders Order[]

  // Nombre de la tabla
  @@map("location")
}

model Product{
  idProduct Int @id @default(autoincrement())
  idProductType Int
  idUserAdded Int
  name      String
  description String @db.Text
  price     Float
  status   Boolean
  createdAt DateTime @default(now())

  // Relaciones
  productType ProductType @relation(fields: [idProductType], references: [idProductType])
  userAdded User @relation(fields: [idUserAdded], references: [idUser])
  itemsCart ItemCart[]
  productPersonalizations ProductPersonalization[]

  // Nombre de la tabla
  @@map("product")
}

model ProductType{
  idProductType Int @id @default(autoincrement())
  type          String

  // Relaciones
  products      Product[]

  // Nombre de la tabla
  @@map("productType")
}

model Cart{
  idCart Int @id @default(autoincrement())
  idUser Int
  status Boolean
  createdAt DateTime @default(now())

  // Relaciones
  user User @relation(fields: [idUser], references: [idUser])
  itemsCart ItemCart[]
  orders Order[]

  // Nombre de la tabla
  @@map("cart")
}

model ItemCart{
  idItemCart Int @id @default(autoincrement())
  idCart Int
  idProduct Int
  quantity Int
  individualPrice Int
  status Boolean

  // Relaciones
  cart Cart @relation(fields: [idCart], references: [idCart])
  product Product @relation(fields: [idProduct], references: [idProduct])
  userProductPersonalize UserProductPersonalize[]

  // Nombre de la tabla
  @@map("itemCart")
}

model Personalization{
  idPersonalization Int @id @default(autoincrement())
  idUserAdded Int
  name String
  status Boolean
  createdAt DateTime @default(now())

  // Relaciones
  userAdded User @relation(fields: [idUserAdded], references: [idUser])
  productPersonalizations ProductPersonalization[]

  // Nombre de la tabla
  @@map("personalization")
}

model ProductPersonalization{
  idProductPersonalization Int @id @default(autoincrement())
  idUserAdded Int
  idProduct Int
  idPersonalization Int
  status Boolean

  // Relaciones
  userAdded User @relation(fields: [idUserAdded], references: [idUser])
  product Product @relation(fields: [idProduct], references: [idProduct])
  personalization Personalization @relation(fields: [idPersonalization], references: [idPersonalization])
  userProductPersonalize UserProductPersonalize[]

  // Nombre de la tabla
  @@map("productPersonalization")
}

model UserProductPersonalize{
  idUserProductPersonalize Int @id @default(autoincrement())
  idItemCart Int
  idProductPersonalization Int
  status Boolean

  // Relaciones
  itemCart ItemCart @relation(fields: [idItemCart], references: [idItemCart])
  productPersonalization ProductPersonalization @relation(fields: [idProductPersonalization], references: [idProductPersonalization])

  // Nombre de la tabla
  @@map("userProductPersonalize")
}

model ShipmentType{
  idShipmentType Int @id @default(autoincrement())
  type String

  // Relaciones
  orders Order[]

  // Nombre de la tabla
  @@map("shipmentType")
}

model PaymentType{
  idPaymentType Int @id @default(autoincrement())
  type String

  // Relaciones
  orders Order[]

  // Nombre de la tabla
  @@map("paymentType")
}

model OrderStatus{
  idOrderStatus Int @id @default(autoincrement())
  status String

  // Relaciones
  orders Order[]

  // Nombre de la tabla
  @@map("orderStatus")
}

model Order{
  idOrder Int @id @default(autoincrement())
  idCart Int
  idPaymentType Int
  idShipmentType Int
  idOrderStatus Int
  idLocation Int?
  createdAt DateTime @default(now())
  deliveryAt DateTime?
  totalPrice Float
  paid Boolean
  paidAt DateTime?
  
  // Stripe Payment Fields
  stripePaymentIntentId String? @unique
  stripeClientSecret String?
  stripePaymentStatus String?
  
  // Relaciones
  cart Cart @relation(fields: [idCart], references: [idCart])
  paymentType PaymentType @relation(fields: [idPaymentType], references: [idPaymentType])
  shipmentType ShipmentType @relation(fields: [idShipmentType], references: [idShipmentType])
  orderStatus OrderStatus @relation(fields: [idOrderStatus], references: [idOrderStatus])
  location Location? @relation(fields: [idLocation], references: [idLocation])
  notifications Notification[]

  // Nombre de la tabla
  @@map("order")
}

model Notification{
  idNotification Int @id @default(autoincrement())
  idOrder Int
  title String
  message String @db.Text
  status Boolean
  createdAt DateTime @default(now())

  // Relaciones
  order Order @relation(fields: [idOrder], references: [idOrder])

  // Nombre de la tabla
  @@map("notification")
}